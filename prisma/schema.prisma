// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = "mongodb+srv://babul1946:babul@practice.n2ruz.mongodb.net/prisma?retryWrites=true&w=majority"
}




model User {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  email       String    @unique
  password    String
  firstName   String
  lastName    String
  role        Role      @default(USER)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  cart        Cart?
  orders      Order[]
  addresses   Address[]
  review     Review[]
}

model Category {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String    @unique
  link        String
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

 

model Product {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  price       Float
  images      String[]
  stock       Int
  keywords    String
  category    Category  @relation(fields: [categoryId], references: [id])
  categoryId  String    @db.ObjectId
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  orderitem      OrderItem[]
  cartItems   CartItem[]
  review      Review[]
}


model OrderItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id])
  productId String   @db.ObjectId
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  user        User         @relation(fields: [userId], references: [id])
  userId      String       @db.ObjectId
  items       OrderItem[]  // Multiple products in an order
  totalAmount Float
  status      OrderStatus  @default(PENDING)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}


model Cart {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @unique @db.ObjectId
  items       CartItem[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model CartItem {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  cart        Cart      @relation(fields: [cartId], references: [id])
  cartId      String    @db.ObjectId
  product     Product   @relation(fields: [productId], references: [id])
  productId   String    @db.ObjectId
  quantity    Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Address {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @db.ObjectId
  street      String
  city        String
  state       String
  postalCode  String
  country     String
  isDefault   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id])
  productId String   @db.ObjectId
  rating    Int      // Out of 5
  comment   String?
  createdAt DateTime @default(now())
}


enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}